{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4"
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "code",
      "metadata": {
        "id": "ddyQ8HE8zeYj"
      },
      "source": [
        "#before running this please change the RUNTIME to GPU (Runtime -> Change runtime type -> set harware accelarotor as GPU)\n",
        "#Mount our google drive\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "3vj15Vde0Gxs"
      },
      "source": [
        "#import libraries\n",
        "!pip3 install face_recognition\n",
        "\n",
        "import torch\n",
        "import torchvision\n",
        "from torchvision import transforms\n",
        "from torch.utils.data import DataLoader\n",
        "from torch.utils.data.dataset import Dataset\n",
        "import os\n",
        "import numpy as np\n",
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "import face_recognition"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "C3r-9rMc1DmO"
      },
      "source": [
        "#import libraries\n",
        "import torch\n",
        "from torch.autograd import Variable\n",
        "import time\n",
        "import os\n",
        "import sys\n",
        "import os\n",
        "from torch import nn\n",
        "from torchvision import models"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "g1G0IoVy2Pc7"
      },
      "source": [
        "#Model with feature visualization\n",
        "from torch import nn\n",
        "from torchvision import models\n",
        "class Model(nn.Module):\n",
        "    def __init__(self, num_classes,latent_dim= 2048, lstm_layers=1 , hidden_dim = 2048, bidirectional = False):\n",
        "        super(Model, self).__init__()\n",
        "        model = models.resnext50_32x4d(pretrained = True)\n",
        "        self.model = nn.Sequential(*list(model.children())[:-2])\n",
        "        self.lstm = nn.LSTM(latent_dim,hidden_dim, lstm_layers,  bidirectional)\n",
        "        self.relu = nn.LeakyReLU()\n",
        "        self.dp = nn.Dropout(0.4)\n",
        "        self.linear1 = nn.Linear(2048,num_classes)\n",
        "        self.avgpool = nn.AdaptiveAvgPool2d(1)\n",
        "    def forward(self, x):\n",
        "        batch_size,seq_length, c, h, w = x.shape\n",
        "        x = x.view(batch_size * seq_length, c, h, w)\n",
        "        fmap = self.model(x)\n",
        "        x = self.avgpool(fmap)\n",
        "        x = x.view(batch_size,seq_length,2048)\n",
        "        x_lstm,_ = self.lstm(x,None)\n",
        "        return fmap,self.dp(self.linear1(x_lstm[:,-1,:]))"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "avpp16KLze7T"
      },
      "source": [
        "im_size = 112\n",
        "mean=[0.485, 0.456, 0.406]\n",
        "std=[0.229, 0.224, 0.225]\n",
        "sm = nn.Softmax()\n",
        "inv_normalize =  transforms.Normalize(mean=-1*np.divide(mean,std),std=np.divide([1,1,1],std))\n",
        "def im_convert(tensor):\n",
        "    \"\"\" Display a tensor as an image. \"\"\"\n",
        "    image = tensor.to(\"cpu\").clone().detach()\n",
        "    image = image.squeeze()\n",
        "    image = inv_normalize(image)\n",
        "    image = image.numpy()\n",
        "    image = image.transpose(1,2,0)\n",
        "    image = image.clip(0, 1)\n",
        "    cv2.imwrite('./2.png',image*255)\n",
        "    return image\n",
        "\n",
        "# def predict(model, img, path='./'):\n",
        "#   print(\"Input image shape:\", img.shape)\n",
        "#   fmap, logits = model(img.to('cuda'))\n",
        "#   print(\"Logits shape:\", logits.shape)\n",
        "#   params = list(model.parameters())\n",
        "#   weight_softmax = model.linear1.weight.detach().cpu().numpy()\n",
        "#   print(\"Weight softmax shape:\", weight_softmax.shape)\n",
        "\n",
        "def predict(model, img, path='./'):\n",
        "  fmap,logits = model(img.to('cuda'))\n",
        "  params = list(model.parameters())\n",
        "  weight_softmax = model.linear1.weight.detach().cpu().numpy()\n",
        "  # logits = sm(logits)\n",
        "  logits = (logits - torch.max(logits))\n",
        "  logits = torch.exp(logits) / torch.sum(torch.exp(logits))\n",
        "  _,prediction = torch.max(logits,1)\n",
        "  confidence = logits[:,int(prediction.item())].item()*100\n",
        "  print('confidence of prediction:',logits[:,int(prediction.item())].item()*100)\n",
        "\n",
        "  # fmap, logits = model(img.to('cuda'))\n",
        "  # params = list(model.parameters())\n",
        "  # weight_softmax = model.linear1.weight.detach().cpu().numpy()\n",
        "\n",
        "\n",
        "  # logits = (logits - torch.max(logits))\n",
        "  # logits = torch.exp(logits) / torch.sum(torch.exp(logits))\n",
        "\n",
        "  # print(\"Logits after softmax:\", logits)\n",
        "\n",
        "  # _, prediction = torch.max(logits, 1)\n",
        "  # print(\"Prediction:\", prediction)\n",
        "  # confidence = logits[:, int(prediction.item())].item() * 100\n",
        "  # print('Confidence of prediction:', confidence)\n",
        "\n",
        "\n",
        "  idx = np.argmax(logits.detach().cpu().numpy())\n",
        "  bz, nc, h, w = fmap.shape\n",
        "  out = np.dot(fmap[-1].detach().cpu().numpy().reshape((nc, h*w)).T,weight_softmax[idx,:].T)\n",
        "  predict = out.reshape(h,w)\n",
        "  predict = predict - np.min(predict)\n",
        "  predict_img = predict / np.max(predict)\n",
        "  predict_img = np.uint8(255*predict_img)\n",
        "  out = cv2.resize(predict_img, (im_size,im_size))\n",
        "  heatmap = cv2.applyColorMap(out, cv2.COLORMAP_JET)\n",
        "  img = im_convert(img[:,-1,:,:,:])\n",
        "  result = heatmap * 0.5 + img*0.8*255\n",
        "  cv2.imwrite('/content/1.png',result)\n",
        "  result1 = heatmap * 0.5/255 + img*0.8\n",
        "  r,g,b = cv2.split(result1)\n",
        "  result1 = cv2.merge((r,g,b))\n",
        "  plt.imshow(result1)\n",
        "  plt.show()\n",
        "  return [int(prediction.item()),confidence]\n",
        "#img = train_data[100][0].unsqueeze(0)\n",
        "#predict(model,img)"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "asSbpP8fzlFj"
      },
      "source": [
        "#!pip3 install face_recognition\n",
        "import torch\n",
        "import torchvision\n",
        "from torchvision import transforms\n",
        "from torch.utils.data import DataLoader\n",
        "from torch.utils.data.dataset import Dataset\n",
        "import os\n",
        "import numpy as np\n",
        "import cv2\n",
        "import matplotlib.pyplot as plt\n",
        "import face_recognition\n",
        "class validation_dataset(Dataset):\n",
        "    def __init__(self,video_names,sequence_length = 60,transform = None):\n",
        "        self.video_names = video_names\n",
        "        self.transform = transform\n",
        "        self.count = sequence_length\n",
        "    def __len__(self):\n",
        "        return len(self.video_names)\n",
        "    # def __getitem__(self, idx):\n",
        "    #     video_path = self.video_names[idx]\n",
        "    #     frames = []\n",
        "    #     a = int(100 / self.count)\n",
        "    #     first_frame = np.random.randint(0, a)\n",
        "    #     for i, frame in enumerate(self.frame_extract(video_path)):\n",
        "    #         faces = face_recognition.face_locations(frame)\n",
        "    #         if len(faces) > 0:\n",
        "    #             top, right, bottom, left = faces[0]\n",
        "    #             frame_with_face = frame.copy()\n",
        "    #             cv2.rectangle(frame_with_face, (left, top), (right, bottom), (0, 255, 0), 2)\n",
        "    #             plt.imshow(cv2.cvtColor(frame_with_face, cv2.COLOR_BGR2RGB))\n",
        "    #             plt.title(\"Frame with Detected Face\")\n",
        "    #             plt.show()\n",
        "    #             frame = frame[top:bottom, left:right, :]\n",
        "    #             frames.append(self.transform(frame))\n",
        "    #             if len(frames) == self.count:\n",
        "    #                 break\n",
        "\n",
        "    #     frames = torch.stack(frames)\n",
        "    #     frames = frames[:self.count]\n",
        "    #     return frames.unsqueeze(0)\n",
        "\n",
        "    # # def __getitem__(self, idx):\n",
        "    # #     video_path = self.video_names[idx]\n",
        "    # #     frames = []\n",
        "    # #     a = int(100 / self.count)\n",
        "    # #     first_frame = np.random.randint(0, a)\n",
        "    # #     for i, frame in enumerate(self.frame_extract(video_path)):\n",
        "    # #         faces = face_recognition.face_locations(frame)\n",
        "    # #         print(\"Number of faces detected:\", len(faces))\n",
        "    # #         if len(faces) > 0:\n",
        "    # #             top, right, bottom, left = faces[0]\n",
        "    # #             frame = frame[top:bottom, left:right, :]\n",
        "    # #             frames.append(self.transform(frame))\n",
        "    # #             print(\"Frames appended:\", len(frames))\n",
        "    # #             if len(frames) == self.count:\n",
        "    # #                 break\n",
        "\n",
        "    # #     # for i, frame in enumerate(self.frame_extract(video_path)):\n",
        "    # #     #     faces = face_recognition.face_locations(frame)\n",
        "    # #     #     if len(faces) > 0:  # Ensure at least one face is detected\n",
        "    # #     #       top, right, bottom, left = faces[0]\n",
        "    # #     #       frame = frame[top:bottom, left:right, :]\n",
        "    # #     #       frames.append(self.transform(frame))\n",
        "    # #     #       if len(frames) == self.count:\n",
        "    # #     #         break\n",
        "    # #     frames = torch.stack(frames)\n",
        "    # #     frames = frames[:self.count]\n",
        "    # #     return frames.unsqueeze(0)\n",
        "\n",
        "    def __getitem__(self,idx):\n",
        "        video_path = self.video_names[idx]\n",
        "        frames = []\n",
        "        a = int(100/self.count)\n",
        "        first_frame = np.random.randint(0,a)\n",
        "        for i,frame in enumerate(self.frame_extract(video_path)):\n",
        "            # if(i % a == first_frame):\n",
        "            faces = face_recognition.face_locations(frame)\n",
        "            try:\n",
        "              top,right,bottom,left = faces[0]\n",
        "              frame = frame[top:bottom,left:right,:]\n",
        "            except:\n",
        "              pass\n",
        "            frames.append(self.transform(frame))\n",
        "            if(len(frames) == self.count):\n",
        "              break\n",
        "        # print(\"no of frames\",len(frames))\n",
        "        frames = torch.stack(frames)\n",
        "        frames = frames[:self.count]\n",
        "        return frames.unsqueeze(0)\n",
        "    def frame_extract(self,path):\n",
        "      vidObj = cv2.VideoCapture(path)\n",
        "      success = 1\n",
        "      while success:\n",
        "          success, image = vidObj.read()\n",
        "          if success:\n",
        "              yield image\n",
        "def im_plot(tensor):\n",
        "    image = tensor.cpu().numpy().transpose(1,2,0)\n",
        "    b,g,r = cv2.split(image)\n",
        "    image = cv2.merge((r,g,b))\n",
        "    image = image*[0.22803, 0.22145, 0.216989] +  [0.43216, 0.394666, 0.37645]\n",
        "    image = image*255.0\n",
        "    plt.imshow(image.astype(int))\n",
        "    plt.show()"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "J8YkC-vwzrkE"
      },
      "source": [
        "#Code for making prediction\n",
        "im_size = 112\n",
        "mean=[0.485, 0.456, 0.406]\n",
        "std=[0.229, 0.224, 0.225]\n",
        "\n",
        "train_transforms = transforms.Compose([\n",
        "                                        transforms.ToPILImage(),\n",
        "                                        transforms.Resize((im_size,im_size)),\n",
        "                                        transforms.ToTensor(),\n",
        "                                        transforms.Normalize(mean,std)])\n",
        "# path_to_videos = ['/content/drive/My Drive/Balanced_Face_only_data/aagfhgtpmv.mp4',\n",
        "#                                    '/content/drive/My Drive/Balanced_Face_only_data/aczrgyricp.mp4',\n",
        "#                                    '/content/drive/My Drive/Balanced_Face_only_data/agdkmztvby.mp4',\n",
        "#                                    '/content/drive/My Drive/Balanced_Face_only_data/abarnvbtwb.mp4']\n",
        "\n",
        "# path_to_videos = ['/content/drive/My Drive/Youtube_Face_only_data/000_003.mp4',\n",
        "#                   '/content/drive/My Drive/Youtube_Face_only_data/000.mp4',\n",
        "#                   '/content/drive/My Drive/Youtube_Face_only_data/002_006.mp4',\n",
        "#                   '/content/drive/My Drive/Youtube_Face_only_data/002.mp4'\n",
        "\n",
        "\n",
        "# ]\n",
        "\n",
        "path_to_videos= [\"/content/drive/MyDrive/Testing/testing3(Fake).mp4\"]\n",
        "\n",
        "video_dataset = validation_dataset(path_to_videos,sequence_length = 10,transform = train_transforms)\n",
        "model = Model(2).cuda()\n",
        "path_to_model = '/content/drive/MyDrive/model_93_acc_100_frames_celeb_FF_data.pt'\n",
        "model.load_state_dict(torch.load(path_to_model))\n",
        "model.eval()\n",
        "for i in range(0,len(path_to_videos)):\n",
        "  print(path_to_videos[i])\n",
        "  prediction = predict(model,video_dataset[i],'./')\n",
        "  if prediction[0] == 1:\n",
        "    print(\"REAL\")\n",
        "  else:\n",
        "    print(\"FAKE\")"
      ],
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install flask pyngrok"
      ],
      "metadata": {
        "id": "-A0j-bj4GO05"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pyngrok"
      ],
      "metadata": {
        "id": "sRSvV6MPAVLP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from flask import Flask\n",
        "from pyngrok import ngrok"
      ],
      "metadata": {
        "id": "k4Xo-1SdAabM"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "port_no = 5000"
      ],
      "metadata": {
        "id": "oXM_EpXyAan6"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "app = Flask(__name__)\n",
        "ngrok.set_auth_token(\"2WTBwtOPgXKyu2VfvJtzUbZBeWT_6856S6v27vuUthAfJPLA2\")\n",
        "public_url =  ngrok.connect(port_no).public_url\n",
        "\n",
        "@app.route(\"/\")\n",
        "def home():\n",
        "    return f\"Running Flask on Google Colab!\"\n",
        "\n",
        "print(f\"To acces the Gloable link please click {public_url}\")\n",
        "\n",
        "app.run(port=port_no)"
      ],
      "metadata": {
        "id": "DFECmtdYAftj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install pyngrok\n",
        "!pip3 install face_recognition\n",
        "from flask import Flask, render_template, request, jsonify\n",
        "from pyngrok import ngrok\n",
        "import torch\n",
        "from torchvision import transforms\n",
        "import os\n",
        "import cv2\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import face_recognition\n",
        "from torch import nn\n",
        "\n",
        "# Define the Model class\n",
        "class Model(nn.Module):\n",
        "    def __init__(self, num_classes, latent_dim=2048, lstm_layers=1, hidden_dim=2048, bidirectional=False):\n",
        "        super(Model, self).__init__()\n",
        "        model = models.resnext50_32x4d(pretrained=True)\n",
        "        self.model = nn.Sequential(*list(model.children())[:-2])\n",
        "        self.lstm = nn.LSTM(latent_dim, hidden_dim, lstm_layers, bidirectional)\n",
        "        self.relu = nn.LeakyReLU()\n",
        "        self.dp = nn.Dropout(0.4)\n",
        "        self.linear1 = nn.Linear(2048, num_classes)\n",
        "        self.avgpool = nn.AdaptiveAvgPool2d(1)\n",
        "\n",
        "    def forward(self, x):\n",
        "        batch_size, seq_length, c, h, w = x.shape\n",
        "        x = x.view(batch_size * seq_length, c, h, w)\n",
        "        fmap = self.model(x)\n",
        "        x = self.avgpool(fmap)\n",
        "        x = x.view(batch_size, seq_length, 2048)\n",
        "        x_lstm, _ = self.lstm(x, None)\n",
        "        return fmap, self.dp(self.linear1(x_lstm[:, -1, :]))\n",
        "\n",
        "# Set up your model and transform\n",
        "im_size = 112\n",
        "mean = [0.485, 0.456, 0.406]\n",
        "std = [0.229, 0.224, 0.225]\n",
        "transform = transforms.Compose([\n",
        "    transforms.ToPILImage(),\n",
        "    transforms.Resize((im_size, im_size)),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize(mean, std)])\n",
        "\n",
        "# Load your pre-trained model\n",
        "model = Model(2).cuda()\n",
        "path_to_model = '/content/drive/MyDrive/model_93_acc_100_frames_celeb_FF_data.pt'  # Update with the correct path\n",
        "model.load_state_dict(torch.load(path_to_model))\n",
        "model.eval()\n",
        "\n",
        "# app = Flask(__name__)\n",
        "app = Flask(__name__, template_folder='/content/drive/MyDrive/templates')\n",
        "\n",
        "# Create a Ngrok tunnel for the Flask app\n",
        "ngrok.set_auth_token(\"2WTBwtOPgXKyu2VfvJtzUbZBeWT_6856S6v27vuUthAfJPLA2\")\n",
        "public_url =  ngrok.connect(port_no).public_url\n",
        "# Create a Ngrok tunnel for the Flask app\n",
        "# ngrok.set_auth_token(\"2WTBwtOPgXKyu2VfvJtzUbZBeWT_6856S6v27vuUthAfJPLA2\")\n",
        "# public_url =  ngrok.connect(port_no).public_url\n",
        "\n",
        "# Define the make_prediction function\n",
        "def make_prediction(model, frame_tensor):\n",
        "    # Perform any necessary pre-processing on the frame_tensor\n",
        "    # ...\n",
        "\n",
        "    # Make predictions using your custom model\n",
        "    with torch.no_grad():\n",
        "        model.eval()\n",
        "        output = model(frame_tensor)\n",
        "        # Perform any post-processing on the model's output if necessary\n",
        "        # ...\n",
        "\n",
        "        # Assuming your model outputs a probability distribution, you can extract the class probabilities\n",
        "        probabilities = torch.softmax(output, dim=1)\n",
        "\n",
        "        # Get the predicted class index (0 or 1 in this case)\n",
        "        _, predicted_class = torch.max(probabilities, 1)\n",
        "\n",
        "        # Calculate the confidence level (probability of the predicted class)\n",
        "        confidence = probabilities[0, predicted_class].item() * 100\n",
        "\n",
        "    # Return prediction results as a dictionary or any format you prefer\n",
        "    prediction_result = {\n",
        "        \"predicted_class\": predicted_class.item(),\n",
        "        \"confidence\": confidence\n",
        "    }\n",
        "\n",
        "    return prediction_result\n",
        "\n",
        "@app.route(\"/\", methods=[\"GET\", \"POST\"])\n",
        "def index():\n",
        "    if request.method == \"POST\":\n",
        "        try:\n",
        "            video_file = request.files[\"video\"]\n",
        "            frames = []  # Collect frames from the video file\n",
        "\n",
        "            # Process the frames and make predictions\n",
        "            for frame in frames:\n",
        "                frame_tensor = transform(frame).unsqueeze(0).unsqueeze(0).cuda()\n",
        "                prediction_result = make_prediction(model, frame_tensor)\n",
        "                # Handle prediction results as needed\n",
        "\n",
        "            # Render an HTML template with the results\n",
        "            # Specify the full path to the template\n",
        "            return render_template(os.path.join(\"/content/drive/MyDrive/templates\", \"index.html\"), prediction_result=prediction_result)\n",
        "\n",
        "        except Exception as e:\n",
        "            return jsonify({\"result\": \"ERROR\", \"message\": str(e)})\n",
        "\n",
        "    # Specify the full path to the template\n",
        "    return render_template(os.path.join(\"/content/drive/MyDrive/templates\", \"result.html\"))\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    print(f\"To acces the Gloable link please click {public_url}\")\n",
        "\n",
        "    app.run(port=port_no)\n",
        "\n"
      ],
      "metadata": {
        "id": "Or5cgCYhH9xX"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import torch\n",
        "import torch.nn as nn\n",
        "import torchvision.transforms as transforms\n",
        "from flask import Flask, request, jsonify\n",
        "from PIL import Image\n",
        "\n",
        "app = Flask(__name__)\n",
        "\n",
        "im_size = 112\n",
        "mean = [0.485, 0.456, 0.406]\n",
        "std = [0.229, 0.224, 0.225]\n",
        "transform = transforms.Compose([\n",
        "    transforms.Resize((im_size, im_size)),\n",
        "    transforms.ToTensor(),\n",
        "    transforms.Normalize(mean, std)\n",
        "])\n",
        "\n",
        "# Load the trained model checkpoint\n",
        "path_to_model = '/content/drive/MyDrive/Final_Model.pt'\n",
        "checkpoint = torch.load(path_to_model)\n",
        "\n",
        "# Access the model directly from the checkpoint\n",
        "model = checkpoint\n",
        "\n",
        "# Set the model to evaluation mode\n",
        "model.eval()\n",
        "\n",
        "# Define a route for making predictions\n",
        "@app.route('/predict', methods=['POST'])\n",
        "def predict():\n",
        "    try:\n",
        "        # Get the uploaded image\n",
        "        image_file = request.files['image']\n",
        "        image = Image.open(image_file).convert('RGB')\n",
        "        image = transform(image).unsqueeze(0)\n",
        "\n",
        "        # Make a prediction\n",
        "        with torch.no_grad():\n",
        "            output = model(image)\n",
        "\n",
        "        # Process the prediction result\n",
        "        # You'll need to adapt this based on your model's output and interpretation\n",
        "        prediction = torch.argmax(output, dim=1).item()\n",
        "\n",
        "        # Return the prediction as JSON\n",
        "        response = {\n",
        "            'prediction': prediction\n",
        "        }\n",
        "        return jsonify(response)\n",
        "\n",
        "    except Exception as e:\n",
        "        return str(e)\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run(host='0.0.0.0', port=5000)\n",
        "\n",
        "\n",
        "\n",
        "# This will run the Flask app in the background\n",
        "!nohup python your_flask_app.py &\n",
        "from pyngrok import ngrok\n",
        "\n",
        "# Set up ngrok\n",
        "ngrok_tunnel = ngrok.connect(port='5000')\n",
        "print('Public URL:', ngrok_tunnel.public_url)\n"
      ],
      "metadata": {
        "id": "AnofbRvMEJAw"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
